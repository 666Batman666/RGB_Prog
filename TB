`timescale 1ns/1ps

`ifdef SYN
`include "../syn/final_syn.v"
`else
`include "../src/HDL_final.v"
`endif

`ifdef FAST
`include "../sim/MEM2048X24_rtl.v"
`else
`include "../sim/MEM2048X24.v"
`endif

`include "../src/timing_generator.v"
`include "../sim/image_capture.v"
`include "../sim/image_source.v"


`define cycle 5.0

module DUT_tb;


  reg  [10:0] v_total, v_size;
  reg  [9:0]  v_start, v_sync;
  reg  [11:0] h_total, h_size;
  reg  [10:0] h_start, h_sync;
  reg  [22:0] vs_reset_src;
  reg  [22:0] vs_reset_IM;
  reg  [22:0] vs_reset_IG;
  reg  [22:0] vs_reset_UM;
  reg  rst_n,clk;


  wire [26:0] DPi_DUT, DPo_DUT;
  wire [2:0] Sync_src, Sync_IM, Sync_IG, Sync_UM;

  reg CC, TP, IM, IG, UM;
  reg [7:0] Brig;

  always #(`cycle/2) clk = ~clk;


  initial
  begin

    /********** Timing parameter **********/

    #0  clk=0;
    #0  rst_n =1;

    h_size  = 12'd1920;
    h_total = 12'd2200;
    h_sync  = 11'd44;
    h_start = 11'd192;
    v_size  = 11'd1080;
    v_total = 12'd1125;
    v_sync  = 10'd5;
    v_start = 10'd41;
    vs_reset_src = 0;
    vs_reset_IM = 0;
    vs_reset_IG = 0;
    vs_reset_UM = 0;

    // 測試 YUV影像亮度調整功能
    CC = 1;
    TP = 0;  // 關閉測試圖案
    IM = 0;  // 關閉圖像動作
    IG = 0;  // 啟用YUV影像格式處理
    UM = 0;  // 關閉銳化遮罩
    Brig = 8'b11111111;  // MSB=0(放大), 低7位=127

    #`cycle rst_n =0;
    #`cycle rst_n =1;

    $display("=== 測試 YUV影像亮度調整功能 ===");
    $display("CC=%b, TP=%b, IM=%b, IG=%b, UM=%b", CC, TP, IM, IG, UM);
    $display("Brig = 8'b%b (MSB=%b: %s, 調整值=%d)",
             Brig, Brig[7], Brig[7] ? "縮小" : "放大", Brig[6:0]);
    $display("功能說明:");
    $display("1. 下半部影像轉為負片");
    $display("2. RGB→YUV轉換");
    $display("3. Y通道4區域亮度調整");
    $display("4. YUV→RGB轉換");

    // 等待足夠長的時間讓image_capture完成
    #50000000;

    $display("=== 測試完成 ===");
    $finish;

  end


  /********** Waveform output **********/

  initial
  begin
`ifdef FSDB
    $fsdbDumpfile("top.fsdb");
    $fsdbDumpvars(0);
    `elsif FSDB_ALL
           $fsdbDumpfile("top.fsdb");
    $fsdbDumpvars(0, "+mda");
`endif

  end



  /********** Image source **********/
  image_source image_source(
                 .clk(clk),
                 .rst_n(rst_n),
                 .Synci(Sync_src),
                 .DPo(DPi_DUT));
  /********** Timing generator **********/
  timing_generator timing_generator_image_src(
                     .Synco(Sync_src),
                     .clk(clk),
                     .rst_n(rst_n),
                     .v_total(v_total),
                     .v_sync(v_sync),
                     .v_start(v_start),
                     .v_size(v_size),
                     .h_total(h_total),
                     .h_sync(h_sync),
                     .h_start(h_start),
                     .h_size(h_size),
                     .vs_reset(vs_reset_src));
  /********** Timing generator **********/
  timing_generator timing_generator_IM(
                     .Synco(Sync_IM),
                     .clk(clk),
                     .rst_n(rst_n),
                     .v_total(v_total),
                     .v_sync(v_sync),
                     .v_start(v_start),
                     .v_size(v_size),
                     .h_total(h_total),
                     .h_sync(h_sync),
                     .h_start(h_start),
                     .h_size(h_size),
                     .vs_reset(vs_reset_IM));
  timing_generator timing_generator_IG(
                     .Synco(Sync_IG),
                     .clk(clk),
                     .rst_n(rst_n),
                     .v_total(v_total),
                     .v_sync(v_sync),
                     .v_start(v_start),
                     .v_size(v_size),
                     .h_total(h_total),
                     .h_sync(h_sync),
                     .h_start(h_start),
                     .h_size(h_size),
                     .vs_reset(vs_reset_IG));
  timing_generator timing_generator_UM(
                     .Synco(Sync_UM),
                     .clk(clk),
                     .rst_n(rst_n),
                     .v_total(v_total),
                     .v_sync(v_sync),
                     .v_start(v_start),
                     .v_size(v_size),
                     .h_total(h_total),
                     .h_sync(h_sync),
                     .h_start(h_start),
                     .h_size(h_size),
                     .vs_reset(vs_reset_UM));

  /********** Function to be verified (DUT) **********/
  HDL_final HDL_final(
              .clk(clk),
              .rst_n(rst_n),
              .CC(CC),
              .TP(TP),
              .IM(IM),
              .IG(IG),
              .UM(UM),
              .Brig(Brig),
              .Sync_IM(Sync_IM),
              .Sync_IG(Sync_IG),
              .Sync_UM(Sync_UM),
              .DPi(DPi_DUT),
              .DPo(DPo_DUT)
            );

  /********** Image capture (saved to BMP file) **********/

  image_capture image_capture(
                  .clk(clk),
                  .rst_n(rst_n),
                  .DPi(DPo_DUT),
                  .Hsize(h_size),
                  .Vsize(v_size));

endmodule
